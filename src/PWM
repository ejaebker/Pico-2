#include <stdio.h>
#include "pico/stdlib.h"
#include "PWM.h"
#include "hardware/pwm.h"
#include <math.h>

//Constants
#define PWM_GPIO 15          // Output pin
#define CLOCK_DIVIDER 4.0   // PWM clock divider
#define PWM_WRAP 255        // 8-bit resolution

//Variable declarations 

// Function to initialize PWM on a specific GPIO
void init_pwm(uint gpio) 
{
    gpio_set_function(gpio, GPIO_FUNC_PWM);
    uint slice_num = pwm_gpio_to_slice_num(gpio);
    pwm_set_wrap(slice_num, PWM_WRAP);
    pwm_set_clkdiv(slice_num, CLOCK_DIVIDER);
    pwm_set_enabled(slice_num, true);
}

// Function to output PWM using sine-triangle comparison
void run_pwm_spwm(float start_time, float time_length, float sine_freq, float tri_freq) {
    init_pwm(PWM_GPIO);
    uint slice_num = pwm_gpio_to_slice_num(PWM_GPIO);
    
    const float sample_rate = 50000.0f;  // 50 kHz sample rate
    const float dt = 1.0f / sample_rate;
    const float amplitude = 0.95f;       // Sine wave amplitude

    uint32_t num_samples = (uint32_t)(time_length * sample_rate);
    float time = start_time;
    
    for (uint32_t i = 0; i < num_samples; ++i) {
        // Generate sine and triangle wave values
        float sine_val = amplitude * sinf(2 * 3.14 * sine_freq * time);
        float tri_val = 2.0f * (time * tri_freq - floorf(0.5f + time * tri_freq)); // triangle wave from -1 to 1

        // Compare sine and triangle to determine PWM duty cycle
        uint16_t pwm_duty = (sine_val > tri_val) ? PWM_WRAP : 0;
        pwm_set_gpio_level(PWM_GPIO, pwm_duty);

        sleep_us((uint)(dt * 1e6)); // Delay to match sample rate
        printf("Time: %.5f | Sine: %.3f | Tri: %.3f | PWM Duty: %u\n", time, sine_val, tri_val, pwm_duty);
        time += dt;
    }

    pwm_set_gpio_level(PWM_GPIO, 0);  // Turn off PWM at end
}